basePath: /
definitions:
  hotel-management_internal_dto.BookingHistoryResponse:
    properties:
      end_date:
        type: string
      id:
        type: integer
      is_paid:
        type: boolean
      rooms:
        items:
          $ref: '#/definitions/hotel-management_internal_dto.BookingHistoryRoom'
        type: array
      start_date:
        type: string
      status:
        type: string
      total_price:
        type: number
    type: object
  hotel-management_internal_dto.BookingHistoryRoom:
    properties:
      bed_num:
        type: integer
      id:
        type: integer
      name:
        type: string
      price:
        type: number
      type:
        type: string
    type: object
  hotel-management_internal_dto.CreateBookingRequest:
    properties:
      end_date:
        type: string
      room_ids:
        items:
          type: integer
        minItems: 1
        type: array
      start_date:
        type: string
    required:
    - end_date
    - room_ids
    - start_date
    type: object
  hotel-management_internal_dto.CreateReviewRequest:
    properties:
      booking_id:
        type: integer
      comment:
        type: string
      rating:
        maximum: 5
        minimum: 1
        type: integer
      room_id:
        type: integer
    required:
    - booking_id
    - rating
    - room_id
    type: object
  hotel-management_internal_dto.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  hotel-management_internal_dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  hotel-management_internal_dto.MailRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  hotel-management_internal_dto.RefreshTokenInput:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  hotel-management_internal_dto.RegisterRequest:
    properties:
      email:
        type: string
      first_name:
        minLength: 1
        type: string
      last_name:
        minLength: 1
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    type: object
  hotel-management_internal_dto.Response:
    properties:
      data: {}
      message:
        type: string
    type: object
  hotel-management_internal_dto.SearchRoomRequest:
    properties:
      bed_num:
        type: integer
      end_date:
        type: string
      has_aircon:
        type: boolean
      max_price:
        type: number
      min_price:
        type: number
      start_date:
        type: string
      view_type:
        type: string
    required:
    - end_date
    - start_date
    type: object
  hotel-management_internal_dto.SearchRoomResponse:
    properties:
      bed_num:
        type: integer
      description:
        type: string
      has_aircon:
        type: boolean
      id:
        type: integer
      image_urls:
        items:
          type: string
        type: array
      name:
        type: string
      price_per_night:
        type: number
      type:
        type: string
      view_type:
        type: string
    type: object
  hotel-management_internal_dto.UpdateProfileRequest:
    properties:
      avatar_url:
        type: string
      name:
        maxLength: 50
        minLength: 2
        type: string
      phone_number:
        type: string
    required:
    - name
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is an API for hotel management.
  title: Hotel Management API
  version: "1.0"
paths:
  /auth/google/callback:
    get:
      consumes:
      - application/json
      description: Handle Google OAuth2 callback, exchange code for tokens, fetch
        user info, create user if not exists, and return JWT tokens.
      parameters:
      - description: Authorization code from Google
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Login successful!
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Code not found from Google.
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to exchange token from Google. / Failed to get user
            information from Google. / Failed to get user / Failed to create user
            / Could not generate token.
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Google OAuth2 callback
      tags:
      - Auth
  /auth/google/login:
    get:
      description: Redirects to Google OAuth2 login
      responses:
        "307":
          description: Temporary Redirect
          schema:
            type: string
      summary: Google OAuth2 Login
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return access and refresh tokens
      parameters:
      - description: User login credentials
        in: body
        name: loginRequest
        required: true
        schema:
          $ref: '#/definitions/hotel-management_internal_dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful!
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request data
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Invalid email or password
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Could not generate token
          schema:
            additionalProperties: true
            type: object
      summary: Login
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Get a new access token using a valid refresh token
      parameters:
      - description: Refresh token input
        in: body
        name: refreshTokenInput
        required: true
        schema:
          $ref: '#/definitions/hotel-management_internal_dto.RefreshTokenInput'
      produces:
      - application/json
      responses:
        "200":
          description: New access token generated successfully
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Could not generate token
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user with email and password
      parameters:
      - description: User registration data
        in: body
        name: registerRequest
        required: true
        schema:
          $ref: '#/definitions/hotel-management_internal_dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Register user successful!
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Email already exists or invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to hash password or create user
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a new user
      tags:
      - Auth
  /bookings:
    post:
      consumes:
      - application/json
      description: Allow a customer to create a booking with selected rooms and dates
      parameters:
      - description: Booking request payload
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/hotel-management_internal_dto.CreateBookingRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Response with booking details and payment URL
          schema:
            $ref: '#/definitions/hotel-management_internal_dto.Response'
        "400":
          description: Invalid request data/Start date must be before end date/Room
            is not available/Invalid client IP address
          schema:
            $ref: '#/definitions/hotel-management_internal_dto.ErrorResponse'
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/hotel-management_internal_dto.ErrorResponse'
        "404":
          description: Room not found
          schema:
            $ref: '#/definitions/hotel-management_internal_dto.ErrorResponse'
        "500":
          description: Failed to get room price/Failed to create booking/Failed to
            commit transaction
          schema:
            $ref: '#/definitions/hotel-management_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new booking
      tags:
      - Booking
  /bookings/{id}/cancel:
    get:
      description: Cancel a booking by ID if allowed
      parameters:
      - description: Booking ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Booking cancelled
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Booking not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to cancel booking
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Cancel a booking
      tags:
      - Booking
  /bookings/history:
    get:
      description: Retrieve a list of past bookings for the authenticated customer
      produces:
      - application/json
      responses:
        "200":
          description: List of booking history
          schema:
            items:
              $ref: '#/definitions/hotel-management_internal_dto.BookingHistoryResponse'
            type: array
        "401":
          description: Unauthorized access
          schema:
            $ref: '#/definitions/hotel-management_internal_dto.ErrorResponse'
        "500":
          description: Failed to get booking history
          schema:
            $ref: '#/definitions/hotel-management_internal_dto.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get booking history for current customer
      tags:
      - Booking
  /mail/reset-password:
    post:
      consumes:
      - application/json
      description: Generates a new password and sends it via email to the user.
      parameters:
      - description: User email for password reset
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/hotel-management_internal_dto.MailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: New password sent.'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'message: Invalid request data.'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'message: Failed to get user'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'message: Failed to update user.'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Reset user password
      tags:
      - Mail
  /mail/smtp-verify:
    post:
      consumes:
      - application/json
      description: Send a verification email with token to user's email address if
        the account is not activated.
      parameters:
      - description: Email to send verification link
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/hotel-management_internal_dto.MailRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Verification email sent.
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request data. | User already verified.
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Failed to get user.
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Could not generate token. | Failed to send verification email.
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Send verification email
      tags:
      - Mail
  /mail/verify-account:
    get:
      consumes:
      - application/json
      description: Activate user account based on the token sent via email
      parameters:
      - description: JWT token
        in: query
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Account verified successfully.
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid token. | User already verified.
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Failed to get user.
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update user.
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Activate user account
      tags:
      - Mail
  /payments/vnpay_return:
    get:
      description: Handle the response returned from VnPay after a payment attempt.
      parameters:
      - description: Transaction Reference
        in: query
        name: vnp_TxnRef
        required: true
        type: string
      - description: VnPay Response Code
        in: query
        name: vnp_ResponseCode
        required: true
        type: string
      - description: VnPay Transaction Number
        in: query
        name: vnp_TransactionNo
        required: true
        type: string
      responses:
        "200":
          description: Payment processed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid callback parameters
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Payment not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Payment has already been processed or booking already paid
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to update payment, process payment, or create bill
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Process VnPay callback
      tags:
      - payments
  /reviews:
    post:
      consumes:
      - application/json
      description: Customers can create a review after checking out from a room
      parameters:
      - description: Review content
        in: body
        name: review
        required: true
        schema:
          $ref: '#/definitions/hotel-management_internal_dto.CreateReviewRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Review created successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request / already reviewed / not checked out
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Booking not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to create review
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a review for a completed booking
      tags:
      - Review
  /rooms/search:
    post:
      consumes:
      - application/json
      description: Find all available rooms that match the search criteria and are
        not booked during the requested time range
      parameters:
      - description: Search filters for room availability
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/hotel-management_internal_dto.SearchRoomRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Find available room successful!
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/hotel-management_internal_dto.SearchRoomResponse'
              type: array
            type: object
        "400":
          description: Invalid request data
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Failed to find available room.
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Search available rooms
      tags:
      - Rooms
  /users/update-profile:
    put:
      consumes:
      - application/json
      description: Update the name, avatar, or phone number of the current user
      parameters:
      - description: Update profile request
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/hotel-management_internal_dto.UpdateProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Update profile successful.'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'message: Invalid request data.'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Failed to get user'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Failed to update user. or Internal server error.'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Update user profile
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
